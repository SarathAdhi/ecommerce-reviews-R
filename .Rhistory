A<-0.2
print(A)
# 20BRS1194
print(class(A))
print(is.numeric(A))
# 20BRS1194
B<-2
print(B)
print(is.integer(B))
# 20BRS1194
C<-10
cost<-(C+A)/B
print(cost)
# 20BRS1194
print(as.character(cost))
first_name='Sarath'
last_name='Adhi'
kid<-paste(first_name, last_name, sep=" ")
kid
# 20BRS1194
sprintf(" %s bought %d chocolates", kid, B)
C<-10
C
# 20BRS1194
# Q1). Create 2 atomic vectors v1, v2. v1 has 3 ele and v2 has 6 ele. how can you create an array of dimemsion 3x3x2?
v1 <- c(1,2,3)
v2 <- c(4,5,6,7,8,9)
# Q1). Create 2 atomic vectors v1, v2. v1 has 3 ele and v2 has 6 ele. how can you create an array of dimemsion 3x3x2?
v1 <- c(1,2,3)
v2 <- c(4,5,6,7,8,9)
result <- array(c(v1, v2), dim = c(3, 3))
result
rname = c("r1", "r2", "r3")
cname = c("c1", "c2", "c3")
mname = c("mat1", "mat2")
result <- array(c(v1, v2), dim = c(3, 3, 2), dimnames = list(rname, cname, mname))
result
# 3.1 Print only the 2nd row of the pre created matrix
result[2,,1]
# 3.2 Print the 2nd col of the first matrix
result[,2,1]
# 3.3 Print the element of the 2nd row and the 3rd col of 2nd matrix
result[2,3,2]
# 3.4 Print the element of the 2nd matrix
result[,,2]
# Q4). Split the 3x3x2 array A1 generated in the pre solution into two 3x3 matrices M1, M2.
# Calculate M3 to be sum of M1 and M2. Sum of all the elements of M1 and M2. Sum of elements of A1 and find its mean.
M1 = result[,,1]
M1
M2 = result[,,2]
M2
M3 = M1+M2
M3
# Create the following matrix, which stores the name and suit of every card in a royal flush
hand2 <- c("ace", "spades", "king", "spades", "queen", "spades", "jack",
"spades", "ten", "spades")
matrix(hand2, nrow = 5, byrow = TRUE)
matrix(hand2, ncol = 2, byrow = TRUE)
hand1 <- c("ace", "king", "queen", "jack", "ten", "spades", "spades",
"spades", "spades", "spades")
matrix(hand1, nrow = 5)
matrix(hand1, ncol = 2)
dim(hand1) <- c(5, 2)
# Q4). Split the 3x3x2 array A1 generated in the pre solution into two 3x3 matrices M1, M2.
# Calculate M3 to be sum of M1 and M2. Sum of all the elements of M1 and M2. Sum of elements of A1 and find its mean.
M1 = result[,,1]
M2 = result[,,2]
apply(M1, 1, sum)
apply(M2, 2, sum)
royal_flush <- c("ace", "king", "queen", "jack", "ten", "spades", "spades", "spades", "spades", "spades")
royal_flush
matrix(hand1, nrow = 5)
matrix(hand1, ncol = 2)
matrix(royal_flush, nrow = 5)
royal_flush <- c("ace", "king", "queen", "jack", "ten", "spades", "spades", "spades", "spades", "spades")
royal_flush
matrix(royal_flush, nrow = 5)
rname = c("r1", "r2", "r3")
cname = c("c1", "c2", "c3")
mname = c("mat1", "mat2")
A1 <- array(c(v1, v2), dim = c(3, 3, 2), dimnames = list(rname, cname, mname))
A1
# 3.1 Print only the 2nd row of the pre created matrix
A1[2,,1]
# 3.2 Print the 2nd col of the first matrix
A1[,2,1]
# 3.3 Print the element of the 2nd row and the 3rd col of 2nd matrix
A1[2,3,2]
# 3.4 Print the element of the 2nd matrix
A1[,,2]
# Q4). Split the 3x3x2 array A1 generated in the pre solution into two 3x3 matrices M1, M2.
# Calculate M3 to be sum of M1 and M2. Sum of all the elements of M1 and M2. Sum of elements of A1 and find its mean.
M1 = A1[,,1]
M2 = A1[,,2]
M3 = M1+M2
apply(M1, 1, sum)
apply(M2, 2, sum)
apply(A1, 1, sum)
apply(A1, 2, mean)
name = c("ace","king","queen","jack","ten")
suit = c("spades","spades","spades","spades","spades")
res = array(c(name, suit),dim = c(5,2))
res
install.packages("data.table")
library(data.table)
install.packages("nycflights13")
ans<-flights[origin == "JKF" & month == 6L]
ans<-flights$[origin == "JKF" & month == 6L]
ans<-flights[$origin == "JKF" & month == 6L]
ans<-flights[origin = "JKF" & month = 6L]
ans<-flights$origin
ans
ans<-flight$origin
ans <- nycflights13::flights[origin = "JFK"]
ans
origin = ewr
ans <- nycflights13::flights[origin = "EWR" & dest="IJH"]
ans
ans <- nycflights13::flights[origin = "EWR" & dest="IJH"]
ans2 <- nycflights13::flights[origin = "EWR" & dest="IJH"]
# origin = ewr and destination = ijh
ans2 <- nycflights13::flights[origin = "EWR" && dest="IJH"]
# origin = ewr and destination = ijh
ans2 <- nycflights13::flights[origin = "EWR"]
ans2
# origin = ewr and destination = ijh
ans2 <- nycflights13::flights[origin == "EWR"  && dest=="IJH"]
# origin = ewr and destination = ijh
ans1 = flights[origin = "EWR", dest = "IAH"]
flights = nycflights13::flights
# origin = ewr and destination = ijh
ans1 = flights[origin = "EWR", dest = "IAH"]
head(ans1)
# origin = ewr and destination = ijh
ans1 = flights[origin = "EWR", dest = "IAH"]
head(ans1)
# origin = ewr and destination = ijh
ans1 = flights[origin = "EWR" & dest = "IAH"]
# origin = ewr and destination = ijh
ans1 = flights[origin == "EWR" & dest == "IAH"]
#Q1)
DT=data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
install.packages("data.table")
install.packages("nycflights13")
#Q1)
DT=data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
#Q1)
DT=data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
#Q1)
DT=data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
install.packages("data.table")
#Q1)
DT=data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
install.packages("dplyr")
#Q1)
DT = data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
install.packages("data.table")
#Q1)
DT = data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
library(data.table)
#Q1)
DT = data.table(ID=c("b","b","b","a","a","c"),a=1:6,b=7:12,c=13:18)
DT
name = c("b","b","b","a","a","c")
a= (1:6)
b=(7:12)
c=(13:18)
student_info = data.frame(name,a,b,c)
student_info
system.time(dt <- fread("C:\Users\cocsa\Downloads\Day.csv"))
system.time(dt <- fread("C:/Users/cocsa/Downloads/Day.csv"))
system.time(dt <- read.csv("C:/Users/cocsa/Downloads/Day.csv"))
system.time(dt <- fread("C:/Users/cocsa/Downloads/Iris.csv"))
system.time(dt <- read.csv("C:/Users/cocsa/Downloads/Iris.csv"))
system.time(dt <- fread("C:/Users/cocsa/Downloads/world_population.csv"))
system.time(dt <- read.csv("C:/Users/cocsa/Downloads/world_population.csv"))
system.time(dt <- fread("C:/Users/cocsa/Downloads/dataset.csv"))
system.time(dt <- read.csv("C:/Users/cocsa/Downloads/dataset.csv"))
#Q2
#a)
y <- c(4,12,6,7,2,9,5)
order(y)
#Q2
#a)
y <- c(19,21,6,0,2,9,8)
order(y)
#b)
a = c(1, 2, 3, 4, 5)
b = c("A", "B", "C", "D", "E")
c = c("A", "B", "c", "1", "2")
list(a, b, c)
#c)
x <- c(1,2,3,4,5,6,7)
x.mean <- mean(x)
print(x.mean)
#d)
x <- c(1,2,3,4,5,6,7,8,9)
length(x)
#e)
rep(10, 4)
#e)
rep(1011, 4)
#d)
x <- c(1,2,3,4,5,6,7,8,9, 10)
length(x)
#f)
data <- rnorm(11)
data
#Q4 1
DT = data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DT[,2,with=FALSE]
#which
DT[,.SD[which.min(v)],by=x]
sales <- data.table(
SaleId = c("S1", "S2", "S3", "S4", "S5"),
SaleDate = as.Date(c("2014-2-20", "2014-5-1", "2014-6-15", "2014-7-1", "2014-12-31"))
)
commercials <- data.table(
CommercialId = c("C1", "C2", "C3", "C4"),
CommercialDate = as.Date(c("2014-1-1", "2014-4-1", "2014-7-1", "2014-9-15"))
)
sales[commercials, rollends = TRUE]
sales[commercials, roll = TRUE]
setkey(sales, "SaleDate")
setkey(commercials, "CommercialDate")
sales[commercials, roll = TRUE]
sales[commercials, rollends = TRUE]
Pitching[ , .SD, .SDcols = c('W', 'L', 'G')]
load('Pitching.RData')
sales[ , .SD, .SDcols = c('C1', 'C2')]
commercials[ , .SD, .SDcols = c('C1', 'C2')]
mtcars = data.table(mtcars)
mtcars[ , lapply(.SD, mean), by = cyl]
mtcars[ ,, by = cyl, .SDcols = c("mpg", "disp")]
mtcars[ ,,, .SDcols = c("mpg", "disp")]
setnames(mtcars, c("cyl","gear"), c("cylinder", "gear box"))
mtcars
subsetting = mtcars[cylinder == 4]
mtcars[cylinder == 4]
mydata[cylinder %in% c(4, 6)]
mtcars[cylinder %in% c(4, 6)]
mtcars[!cylinder %in% c(4, 6)]
(nycflights13)
install.packages("nycflights13")
flights = data.table(nycflights13)
flights = nycflights13::flights
flights = data.table(flights)
flights
setnames(flights, c("dep_time","arr_time"), c("departure_time", "arrival_time"))
flights
flights[year == 2013]
flights[origin  == "LGK"]
flights[origin  == "LGA"]
mtcars[origin %in% c("LGA", "EWR")]
flights[origin %in% c("LGA", "EWR")]
flights[!origin %in% c("LGA", "EWR")]
flights[ ,,, .SDcols = c("year", "month")]
flights[ , lapply(.SD, mean), by = month]
flights[ , lapply(.SD, mean), by = "month"]
flights[, lapply(.SD, mean)]
flights[, lapply(.SD, mean), .SDcols = c("distance", "hour")]
DT <- data.table(x=rep(c("b","a","c"),each=3), y=c(1,3,6), v=1:9)
DT
X  <- data.table(x=c("c","b"), v=8:7, foo=c(4,2))
X
DT[X, on="x"]
# g).
j = as.Date("2003-06-12")
weekdays(j+1:3)
# g).
j = as.Date("2003-06-09")
weekdays(j+1:3)
# h).
date_1 = as.Date("2003-06-12")
date_2 = as.Date("2004-06-01")
diff_dates = difftime(date_2,date_1, units = "days")
diff_dates
# h).
date1 = as.Date("2003-06-12")
date2 = as.Date("2004-06-01")
diffDates = difftime(date2, date1, units = "days")
diffDates
# h).
date1 = as.Date("2003-06-12")
date2 = as.Date("2004-06-01")
diffDates = difftime(date2, date1, units = "days")
diffDates
# 1. read csv, text, json file
# CSV file
csv_file <- read.csv("S:\5th SEM\FDA - CSE3505\Lab\Lab 5\Raisin_Dataset.csv")
# 1. read csv, text, json file
# CSV file
csv_file <- read.csv("S:/5th SEM/FDA - CSE3505/Lab/Lab 5/Raisin_Dataset.csv")
csv_file
# 1. read csv, text, json file
# CSV file
csv_file <- read.csv("S:/5th SEM/FDA - CSE3505/Lab/Lab 5/Raisin_Dataset.csv")
csv_file
# Excel file
install.packages("readxl")
# Excel file
install.packages("readxl")
# Excel file
install.packages("readxl")
library("readxl")
# Excel file
install.packages("readxl")
# Excel file
install.packages("readxl")
install.packages("readxl")
# 1. Import the package MASS
install.packages("MASS")
library(MASS)
# Dataset link https://r-data.pmagunia.com/dataset/r-dataset-package-mass-survey
str(survey)
survey
# 6. Find the relative freq distribution of left and right handers and display them with the precision of two decimal places
table(df$W.Hnd)/length(df$W.Hnd)
# 3. Create a df that contains survey data after removing NA values
df <- data.frame(survey)
df
df <- na.omit(df)
df
# 6. Find the relative freq distribution of left and right handers and display them with the precision of two decimal places
table(df$W.Hnd)/length(df$W.Hnd)
# 6. Find the relative freq distribution of left and right handers and display them with the precision of two decimal places
freq = table(df$W.Hnd)
sprintf("%.2f",as.double(freq[2])/as.double(freq[1]))
# 7. Display the male left hander and female left hander in column format
table(df[df$W.Hnd == "Left", 1])
# 8. what percentage of male left hander never smoke
male_left_smokers = table(df[df$Sex == "Male" & df$W.Hnd == "Left", 9])
percent = male_left_smokers["Never"]/sum(male_left_smokers)*100
percent
# 1. Import the package MASS
install.packages("MASS")
install.packages("MASS")
# 2. List the row of data that has missing values
survey[which(is.na(survey)),]
# Dataset link https://r-data.pmagunia.com/dataset/r-dataset-package-mass-survey
str(survey)
library(MASS)
# Dataset link https://r-data.pmagunia.com/dataset/r-dataset-package-mass-survey
str(survey)
survey
# 2. List the row of data that has missing values
survey[which(is.na(survey)),]
# 4. How many male and female students participated in the survey
library(dplyr)
x<-df%>%
count(Sex)
x
# 3. Create a df that contains survey data after removing NA values
df <- data.frame(survey)
df <- na.omit(df)
df
# 3. Create a df that contains survey data after removing NA values
df <- data.frame(survey)
df <- na.omit(df)
head(df)
# 5. How many left and right handers are there.
df %>%
count(W.Hnd)
# 5. How many left and right handers are there.
df %>%
count(W.Hnd)
# 6. Find the relative freq distribution of left and right handers and display them with the precision of two decimal places
freq = table(df$W.Hnd)
sprintf("%.2f",as.double(freq[2])/as.double(freq[1]))
# 7. Display the male left hander and female left hander in column format
table(df[df$W.Hnd == "Left", 1])
# 8. what percentage of male left hander never smoke
male_left_smokers = table(df[df$Sex == "Male" & df$W.Hnd == "Left", 9])
percent = male_left_smokers["Never"]/sum(male_left_smokers)*100
percent
# 4. How many male and female students participated in the survey
library(dplyr)
x<-df%>%
count(Sex)
x
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
library(MASS)
newsurvey=na.omit(survey)
newsurvey
survey <- na.omit(survey)
survey
# 1.Find the range of students age participated in the survey.
range(survey$Age)
newsurveyage=newsurvey$Age
newsurveyage.cut=cut(newsurveyage,breaks,right=FALSE)
breaks=seq(17,70,by=10)
breaks
newsurveyage=newsurvey$Age
newsurveyage.cut=cut(newsurveyage,breaks,right=FALSE)
newsurveyage.freq=table(newsurveyage.cut)
cbind(newsurveyage.freq)
interval=cbind(newsurveyage.freq)
index=which.max(interval)
names(interval[index,1])
whnd.freq=table(newsurvey$Wr.Hnd)
cbind(whnd.freq)
quantile(newsurvey$Wr.Hnd)
aggregate(newsurvey$Age, list(newsurvey$Exer), FUN=mean)
summary(newsurvey$Pulse)
getPath <- function() {
currentPath <- getwd()
return(currentPath)
}
getPath()
getPath <- function() {
currentPath <- getwd()
return(currentPath)
}
getPath()
getCurrentPath <- function() {
currentPath <- getwd()
return(currentPath)
}
getCurrentPath()
getCurrentPath <- function() {
currentPath <- getwd()
return(currentPath)
}
getCurrentPath()
getCurrentPath <- function() {
currentPath <- dirname(getwd())
return(currentPath)
}
getCurrentPath()
getCurrentPath <- function() {
currentPath <- gsub("/\\w*/","/",gsub("/\\w*/","/",getwd()))
return(currentPath)
}
getCurrentPath()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
plumber::plumb(file='S:/5th SEM/FDA - CSE3505/J Comp/project/app/plumber.R')$run()
